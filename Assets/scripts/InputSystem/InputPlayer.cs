//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/scripts/InputSystem/InputPlayer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputPlayer : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputPlayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputPlayer"",
    ""maps"": [
        {
            ""name"": ""Controlling"",
            ""id"": ""46607386-cb3e-4f8c-b2af-7dc654a9071c"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""9697fa85-49fd-4b2f-9215-b03978fab5ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pressing"",
                    ""type"": ""Button"",
                    ""id"": ""83632e1e-6991-4e5b-b8fb-b2ed7dfeeb21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""deae4bab-bdf2-43a1-b768-c3bc987a0041"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5b51693-0f81-44b7-8c8c-5723a807456f"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pressing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""366d7d94-0017-467c-9176-56d9d985bf7d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pressing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controlling
        m_Controlling = asset.FindActionMap("Controlling", throwIfNotFound: true);
        m_Controlling_Tap = m_Controlling.FindAction("Tap", throwIfNotFound: true);
        m_Controlling_Pressing = m_Controlling.FindAction("Pressing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controlling
    private readonly InputActionMap m_Controlling;
    private IControllingActions m_ControllingActionsCallbackInterface;
    private readonly InputAction m_Controlling_Tap;
    private readonly InputAction m_Controlling_Pressing;
    public struct ControllingActions
    {
        private @InputPlayer m_Wrapper;
        public ControllingActions(@InputPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Controlling_Tap;
        public InputAction @Pressing => m_Wrapper.m_Controlling_Pressing;
        public InputActionMap Get() { return m_Wrapper.m_Controlling; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllingActions set) { return set.Get(); }
        public void SetCallbacks(IControllingActions instance)
        {
            if (m_Wrapper.m_ControllingActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_ControllingActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_ControllingActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_ControllingActionsCallbackInterface.OnTap;
                @Pressing.started -= m_Wrapper.m_ControllingActionsCallbackInterface.OnPressing;
                @Pressing.performed -= m_Wrapper.m_ControllingActionsCallbackInterface.OnPressing;
                @Pressing.canceled -= m_Wrapper.m_ControllingActionsCallbackInterface.OnPressing;
            }
            m_Wrapper.m_ControllingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @Pressing.started += instance.OnPressing;
                @Pressing.performed += instance.OnPressing;
                @Pressing.canceled += instance.OnPressing;
            }
        }
    }
    public ControllingActions @Controlling => new ControllingActions(this);
    public interface IControllingActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnPressing(InputAction.CallbackContext context);
    }
}
